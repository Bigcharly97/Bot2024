const handler = async (m, {conn, usedPrefix, command, args, isOwner, isAdmin, isROwner}) => {
const optionsFull = `_*< FUNCIONES DEL BOT />*_\n 
‚ñ¢ *Opci√≥n:* ‚ú® | WELCOME
‚ñ¢ *Comando:* ${usedPrefix + command} welcome
‚ñ¢ *Descripci√≥n:* Activa o desactiva la bienvenida en el grupo.

--------------------------------

‚ñ¢ *Opci√≥n:* üåé | MODO PUBLICO
‚ñ¢ *Comando:* ${usedPrefix + command} public
‚ñ¢ *Descripci√≥n:* El bot se vuelve de uso publico y/o privado.
‚ñ¢ *Nota:* Este comando solo puede ser usado por el/los propietario(s) del bot.

--------------------------------

‚ñ¢ *Opci√≥n:* üîé | DETECT
‚ñ¢ *Comando:* ${usedPrefix + command} detect
‚ñ¢ *Descripci√≥n:* Activa o desacriva las notificaciones de cambios en el grupo.

--------------------------------

‚ñ¢ *Opci√≥n:* üîé | DETECT 2
‚ñ¢ *Comando:* ${usedPrefix + command} detect2
‚ñ¢ *Descripci√≥n:* Detecta modificaciones en el grupo y mantiene una mejor gestion.

--------------------------------

‚ñ¢ *Opci√≥n:* ‚ùó | RESTRICT
‚ñ¢ *Comando:* ${usedPrefix + command} restrict
‚ñ¢ *Descripci√≥n:* Activa o desactiva las restricciones del Bot, como la de sacar o agregar personas a un grupo.
‚ñ¢ *Nota:* Este comando solo puede ser usado por el/los propietario(s) del bot.

--------------------------------

‚ñ¢ *Opci√≥n:* ‚òëÔ∏è | AUTOREAD
‚ñ¢ *Comando:* ${usedPrefix + command} autoread
‚ñ¢ *Descripci√≥n:* Marca como leido los mensajes y los estados autom√°ticamente.
‚ñ¢ *Nota:* Este comando solo puede ser usado por el/los propietario(s) del bot.

--------------------------------

‚ñ¢ *Opci√≥n:* üëæ | AUTOSTICKER
‚ñ¢ *Comando:* ${usedPrefix + command} autosticker 
‚ñ¢ *Descripci√≥n:* Todas las imagenes o videos enviados en el grupo se convierten en stickers. 

--------------------------------

‚ñ¢ *Opci√≥n:* üí¨ | PCONLY
‚ñ¢ *Comando:* ${usedPrefix + command} pconly
‚ñ¢ *Descripci√≥n:* El Bot solo responder√° a los comandos si es un chat privado.
‚ñ¢ *Nota:* Este comando solo puede ser usado por el/los propietario(s) del bot.

--------------------------------

‚ñ¢ *Opci√≥n:* üè¢ | GCONLY
‚ñ¢ *Comando:* ${usedPrefix + command} gconly
‚ñ¢ *Descripci√≥n:* El Bot solo respondera a los comandos si es un grupo. 
‚ñ¢ *Nota:* Este comando solo puede ser usado por el/los propietario(s) del bot.

--------------------------------

‚ñ¢ *Opci√≥n:* ‚ùå | ANTIVIEWONCE 
‚ñ¢ *Comando:* ${usedPrefix + command} antiviewonce
‚ñ¢ *Descripci√≥n:* Las imagenes enviadas para ver solo una vez, son reenviadas normal por el Bot. 

--------------------------------

‚ñ¢ *Opci√≥n:* üìµ | ANTILLAMADAS
‚ñ¢ *Comando:* ${usedPrefix + command} anticall
‚ñ¢ *Descripci√≥n:* El Bot bloquer√° a las personas que llamen al Bot. 
‚ñ¢ *Nota:* Este comando solo podra ser usado por owners del Bot.

--------------------------------

‚ñ¢ *Opci√≥n:* ü§¨ | ANTITOXIC
‚ñ¢ *Comando:* ${usedPrefix + command} antitoxic
‚ñ¢ *Descripci√≥n:* Detecta la malas palabras y advierte al participante del grupo, antes de ser eliminado.
‚ñ¢ *Nota:* Se necesita tener activa la funci√≥n restrict.

--------------------------------

‚ñ¢ *Opci√≥n:* üëë | MODOADMIN
‚ñ¢ *Comando:* ${usedPrefix + command} modoadmin
‚ñ¢ *Descripci√≥n:* El bot solo responder√° a los mensajes enviados por los admins. del grupo.

--------------------------------

‚ñ¢ *Opci√≥n:* üòÉ | GOKUSIM
‚ñ¢ *Comando:* ${usedPrefix + command} gokubot
‚ñ¢ *Descripci√≥n:* El bot empezar√° a responder a los mensajes usando la IA de SimSimi.

--------------------------------

‚ñ¢ *Opci√≥n:* üõ°Ô∏è | ANTIDELETE
‚ñ¢ *Comando:* ${usedPrefix + command} antidelete
‚ñ¢ *Descripci√≥n:* El bot detecta cuando un usuario elimina un mensaje y lo reenv√≠a.


--------------------------------

‚ñ¢ *Opci√≥n:* ü§ñ | GOKUIA
‚ñ¢ *Comando:* ${usedPrefix + command} gokuia
‚ñ¢ *Descripci√≥n:* Se activa el modo "Inteligencia Artificial" con ChatGPT en todos los chats privados.
‚ñ¢ *Nota:* Este comando solo puede ser usado por el/los propietario(s) del bot.

--------------------------------

‚ñ¢ *Opci√≥n:* üí¨ | ANTIPRIVADO
‚ñ¢ *Comando:* ${usedPrefix + command} antiprivado
‚ñ¢ *Descripci√≥n:* El Bot bloquer√° a las personas que escriban al privado del Bot. 
‚ñ¢ *Nota:* Este comando solo puede ser usado por el/los propietario(s) del bot.`.trim();

  const isEnable = /true|enable|(turn)?on|1/i.test(command);
  const chat = global.db.data.chats[m.chat];
  const user = global.db.data.users[m.sender];
  const bot = global.db.data.settings[conn.user.jid] || {};
  const type = (args[0] || '').toLowerCase();
  let isAll = false; const isUser = false;
  switch (type) {
    case 'welcome':
      if (!m.isGroup) {
        if (!isOwner) {
          global.dfail('group', m, conn);
          throw false;
        }
      } else if (!(isAdmin || isOwner || isROwner)) {
        global.dfail('admin', m, conn);
        throw false;
      }
      chat.welcome = isEnable;
      break;
    case 'detect':
      if (!m.isGroup) {
        if (!isOwner) {
          global.dfail('group', m, conn);
          throw false;
        }
      } else if (!isAdmin) {
        global.dfail('admin', m, conn);
        throw false;
      }
      chat.detect = isEnable;
      break;
    case 'detect2':
      if (!m.isGroup) {
        if (!isOwner) {
          global.dfail('group', m, conn);
          throw false;
        }
      } else if (!isAdmin) {
        global.dfail('admin', m, conn);
        throw false;
      }
      chat.detect2 = isEnable;
      break;
    case 'gokubot':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.simi = isEnable;
      break;
    case 'antiporno':
      if (m.isGroup) {
        if (!(isAdmin || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antiporno = isEnable;
      break;
    case 'delete':
      if (m.isGroup) {
        if (!(isAdmin || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.delete = isEnable;
      break;
    case 'antidelete':
      if (m.isGroup) {
        if (!(isAdmin || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antidelete = isEnable;
      break;
    case 'public':
      isAll = true;
      if (!isROwner) {
        global.dfail('rowner', m, conn);
        throw false;
      }
      global.opts['self'] = !isEnable;
      break;
    case 'antilink':
      if (m.isGroup) {
        if (!(isAdmin || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antiLink = isEnable;
      break;
    case 'antilink2':
      if (m.isGroup) {
        if (!(isAdmin || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antiLink2 = isEnable;
      break;
    case 'antiviewonce':
      if (m.isGroup) {
        if (!(isAdmin || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antiviewonce = isEnable;
      break;
    case 'modohorny':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.modohorny = isEnable;
      break;
    case 'modoadmin':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.modoadmin = isEnable;
      break;
    case 'autosticker':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.autosticker = isEnable;
      break;
    case 'audios':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.audios = isEnable;
      break;
    case 'restrict':
      isAll = true;
      if (!(isROwner || isOwner)) {
        global.dfail('owner', m, conn);
        throw false;
      }
      bot.restrict = isEnable;
      break;
    case 'audios_bot':
      isAll = true;
      if (!(isROwner || isOwner)) {
        global.dfail('owner', m, conn);
        throw false;
      }
      bot.audios_bot = isEnable;      
      break;
    case 'gokuia':
      isAll = true;
      if (!(isROwner || isOwner)) {
        global.dfail('owner', m, conn);
        throw false;
      }
      bot.modoia = isEnable;      
      break;      
    case 'nyimak':
      isAll = true;
      if (!isROwner) {
        global.dfail('rowner', m, conn);
        throw false;
      }
      global.opts['nyimak'] = isEnable;
      break;
    case 'autoread':
      isAll = true;
      if (!(isROwner || isOwner)) {
        global.dfail('rowner', m, conn);
        throw false;
      }
      bot.autoread2 = isEnable;
      //global.opts['autoread'] = isEnable;
      break;
    case 'pconly':
    case 'privateonly':
      isAll = true;
      if (!isROwner) {
        global.dfail('rowner', m, conn);
        throw false;
      }
      global.opts['pconly'] = isEnable;
      break;
    case 'gconly':
    case 'grouponly':
      isAll = true;
      if (!isROwner) {
        global.dfail('rowner', m, conn);
        throw false;
      }
      global.opts['gconly'] = isEnable;
      break;
    case 'swonly':
    case 'statusonly':
      isAll = true;
      if (!isROwner) {
        global.dfail('rowner', m, conn);
        throw false;
      }
      global.opts['swonly'] = isEnable;
      break;
    case 'anticall':
      isAll = true;
      if (!(isROwner || isOwner)) {
        global.dfail('owner', m, conn);
        throw false;
      }
      bot.antiCall = isEnable;
      break;
    case 'antiprivado':
      isAll = true;
      if (!(isROwner || isOwner)) {
        global.dfail('owner', m, conn);
        throw false;
      }
      bot.antiPrivate = isEnable;
      break;
    case 'modejadibot':
      isAll = true;
      if (!isROwner) {
        global.dfail('rowner', m, conn);
        throw false;
      }
      bot.modejadibot = isEnable;
      break;
    case 'antispam':
      isAll = true;
      if (!(isROwner || isOwner)) {
        global.dfail('owner', m, conn);
        throw false;
      }
      bot.antispam = isEnable;
      break;
    case 'antitoxic':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antiToxic = isEnable;
      break;
    case 'antitraba':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antiTraba = isEnable;
      break;
    case 'antiarabes':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn); 
          throw false;
        }
      }
      chat.antiArab = isEnable;
      break;
    case 'antiarabes2':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antiArab2 = isEnable;
      break;
    default:
      if (!/[01]/.test(command)) return await conn.sendMessage(m.chat, {text: optionsFull}, {quoted: m});
      throw false;
  }
  conn.sendMessage(m.chat, {text: `_*< ·¥á…¥·¥Ä ô ü·¥á ·¥Ñ·¥è…¥“ì…™…¢ />*_\n\n*‚Ä¢  ü·¥Ä ·¥è·¥ò·¥Ñ…™·¥èÃÅ…¥* _${type}_ *“ì·¥ú·¥á* ${isEnable ? '_activada_' : '_desactivada_'} *·¥áx…™·¥õ·¥ès·¥Ä·¥ç·¥á…¥·¥õ·¥á ·¥ò·¥Ä Ä·¥Ä ·¥ás·¥õ·¥á* ${isAll ? '_bot._' : isUser ? '' : '_chat._'}`}, {quoted: m});
  //conn.sendMessage(m.chat, {text: `‚ñ¢ *Opci√≥n:* ${type}\n\n‚ñ¢ *Estado:* ${isEnable ? 'Activado' : 'Desactivado'}\n\n‚ñ¢ *Para* ${isAll ? 'este bot' : isUser ? '' : 'este chat'}`}, {quoted: m});
};
handler.command = /^((en|dis)able|(tru|fals)e|(turn)?[01])$/i;
export default handler;
